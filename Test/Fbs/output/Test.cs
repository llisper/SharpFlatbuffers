// automatically generated by the FlatBuffers compiler, do not modify

namespace Test
{

using System;
using FlatBuffers;

public sealed class TestMessage : Table {
  public static TestMessage GetRootAsTestMessage(ByteBuffer _bb) { return GetRootAsTestMessage(_bb, new TestMessage()); }
  public static TestMessage GetRootAsTestMessage(ByteBuffer _bb, TestMessage obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public TestMessage __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Test.AddressBook Ab { get { return GetAb(new Test.AddressBook()); } }
  public Test.AddressBook GetAb(Test.AddressBook obj) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public sbyte GetBb(int j) { int o = __offset(6); return o != 0 ? bb.GetSbyte(__vector(o) + j * 1) : (sbyte)0; }
  public int BbLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBbBytes() { return __vector_as_arraysegment(6); }

  public static Offset<TestMessage> CreateTestMessage(FlatBufferBuilder builder,
      Offset<Test.AddressBook> abOffset = default(Offset<Test.AddressBook>),
      VectorOffset bbOffset = default(VectorOffset)) {
    builder.StartObject(2);
    TestMessage.AddBb(builder, bbOffset);
    TestMessage.AddAb(builder, abOffset);
    return TestMessage.EndTestMessage(builder);
  }

  public static void StartTestMessage(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddAb(FlatBufferBuilder builder, Offset<Test.AddressBook> abOffset) { builder.AddOffset(0, abOffset.Value, 0); }
  public static void AddBb(FlatBufferBuilder builder, VectorOffset bbOffset) { builder.AddOffset(1, bbOffset.Value, 0); }
  public static VectorOffset CreateBbVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartBbVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<TestMessage> EndTestMessage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TestMessage>(o);
  }
  public static void FinishTestMessageBuffer(FlatBufferBuilder builder, Offset<TestMessage> offset) { builder.Finish(offset.Value); }
};


}
